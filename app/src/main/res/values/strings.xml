<resources>
    <string name="app_name">Algorithm VA</string>
    <string name="Easy">Easy</string>

    <string name="splash_screen_bottom_text">Algorithm Visualization Analysis</string>
    <string name="demo_txt">Hello world!</string>

    <!-- Strings for On Boarding Screen -->

    <!--Titles-->
    <string name="first_slide_title">Algorithm &amp; Data Structure</string>
    <string name="second_slide_title">Grow Analytical Skill</string>
    <string name="third_slide_title">Analyze Algorithm</string>
    <string name="fourth_slide_title">Visualize Algorithm</string>
    <string name="f_th_slide_title">Well Structured</string>

    <!--Descriptions-->
    <string name="first_slide_desc">Learning algorithms and data structures is essential for anyone interested in computer science or programming. These enable us to solve complex problems efficiently, efficient programs.</string>
    <string name="second_slide_desc">Our Algorithm application is designed with a well-structured approach to optimize your coding experience!.</string>
    <string name="third_slide_desc">Maximize your coding potential with Algorithm Analysis. Optimize your coding skills </string>
    <string name="fourth_slide_desc">Our interactive visualizations will help you understand complex algorithms, step-by-step. Boost your problem-solving abilities with ease.</string>
    <string name="f_th_slide_desc">Boost your analytical skills and improve your coding with our Algorithm VA application. Unlock your full potential!</string>
    <!--  With a user-friendly interface you can easily navigate through complex algorithms and data structures -->
    <!-- With in-depth analysis of algorithm you can easily identify and address bottlenecks in your code. Our Algorithm Analysis is the perfect solution for anyone looking to take their coding skills to the next level. -->
    <!-- Optimize your coding skills with our Algorithm application!  -->
    <!-- Our interactive visualizations and step-by-step breakdowns make it easy to understand and optimize complex algorithms. -->
    <!--Buttons-->
    <string name="skip_btn">Skip</string>
    <string name="next_btn">Next</string>
    <string name="let_get_started">Lets Get Started</string>
    <string name="remember_me">Remember me</string>
    <string name="forget_password">Forget Password</string>
    <string name="create_account">Create New Account</string>
    <string name="Confirm_password">Confirm Password</string>
    <string name="already_have_account">Already have an account</string>
    <!-- Strings related to login -->
    <string name="username">Enter username</string>
    <string name="password">Enter Password</string>
    <string name="prompt_email">Enter Email</string>
    <string name="prompt_password">Password</string>
    <string name="action_sign_in">Sign in or register</string>
    <string name="action_sign_in_short">Sign in</string>
    <string name="welcome">"Welcome!"</string>
    <string name="invalid_username">Not a valid username</string>
    <string name="invalid_password">Password must be >5 characters</string>
    <string name="login_failed">"Login failed"</string>
    <!--Welcome Strings-->
    <string name="welcome_screen">LETS START YOUR JOURNEY</string>
    <string name="signin">Sign In</string>
    <string name="signup">Sign Up</string>

    <string name="testing">Testing</string>
    <string name="todo">TODO</string>
    <string name="sorting">Sorting</string>
    <string name="selection_sort">Selection Sort</string>
    <string name="bubble_sort">Bubble Sort</string>
    <string name="marge_sort">Marge Sort</string>
    <string name="medium">Medium</string>
    <string name="algorithm">Algorithm</string>
    <string name="visualization">Visualization</string>
    <string name="analysis">Analysis</string>
    <string name="selection_sort_description">Selection Sort Description</string>
    <string name="selection_sort_dec_1">The selection sort algorithm sorts an array by repeatedly finding the minimum element (considering ascending order) from the unsorted part and putting it at the beginning</string>
    <string name="selection_sort_2">The algorithm maintains two subarrays in a given array\n • The subarray which already sorted \n • The remaining subarray was unsorted</string>
    <string name="arr">arr[] = {64, 25, 12, 22, 11}</string>
    <string name="first_pass">First pass:</string>
    <string name="the">\u2022 For the first position in the sorted array, the whole array is traversed from index 0 to 4 sequentially. The first position where 64 is stored presently, after traversing whole array it is clear that 11 is the lowest value</string>


    <!-- Selection Sort -->
    <string name="selection_1">1&#160;import java.util.Arrays;</string>
    <string name="selection_2">2&#160;public class SelectionSort{</string>
    <string name="selection_3">3&#160;&#160;public static void sort(int arr[]){</string>
    <string name="selection_4">4&#160;&#160;&#160;int n = arr.length;</string>
    <string name="selection_5">5&#160;&#160;&#160;for(int i=0; i &#60;&#160; n - 1; i++){</string>
    <string name="selection_6">6&#160;&#160;&#160;&#160;int min_idx = i;</string>
    <string name="selection_7">7&#160;&#160;&#160;&#160;for(int j=i+1;&#160;j&#160;&#60;&#160;n;&#160;j++){</string>
    <string name="selection_8">8&#160;&#160;&#160;&#160;&#160;if(arr[ j ] &#60; arr[ min_idx ]){</string>
    <string name="selection_9">9&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;min_idx = j;</string>
    <string name="selection_10">10&#160;&#160;&#160;&#160;&#160;}</string>
    <string name="selection_11">11&#160;&#160;&#160;&#160;}</string>
    <string name="selection_12">12&#160;&#160;&#160;&#160;int temp = arr[ min_idx ];</string>
    <string name="selection_13">13&#160;&#160;&#160;&#160;arr[ min_idx ] = arr[ i ];</string>
    <string name="selection_14">14&#160;&#160;&#160;&#160;arr[ i ] = temp;</string>
    <string name="selection_15">15&#160;&#160;&#160;}</string>
    <string name="selection_16">16&#160;&#160;}</string>
    <string name="selection_17">17&#160;&#160;public static boolean isSorted(int arr[]){</string>
    <string name="selection_18">18&#160;&#160;&#160;int prev = arr[0];</string>
    <string name="selection_19">19&#160;&#160;&#160;for(int i=1; i &#60; arr.length; i++){</string>
    <string name="selection_20">20&#160;&#160;&#160;&#160;if(prev > arr[ i ]){</string>
    <string name="selection_21">21&#160;&#160;&#160;&#160;&#160;System.out.println(&quot;Selection Sort Fails&quot;);</string>
    <string name="selection_22">22&#160;&#160;&#160;&#160;&#160;return false;</string>
    <string name="selection_23">23&#160;&#160;&#160;&#160;}</string>
    <string name="selection_24">24&#160;&#160;&#160;}</string>
    <string name="selection_25">25&#160;&#160;&#160;return true;</string>
    <string name="selection_26">26&#160;&#160;}</string>
    <string name="selection_27">27&#160;&#160;public static void main(String[] args){</string>
    <string name="selection_28">28&#160;&#160;&#160;int[] array = {4, 8, 2, 9, 5}</string>
    <string name="selection_29">29&#160;&#160;&#160;sort(array);</string>
    <string name="selection_30">30&#160;&#160;&#160;if(isSorted(array)){</string>
    <string name="selection_31">31&#160;&#160;&#160;&#160;System.out.println(Arrays.toString(array));</string>
    <string name="selection_32">32&#160;&#160;&#160;}</string>
    <string name="selection_33">33&#160;&#160;}</string>
    <string name="selection_34">34&#160;}</string>
    <string name="program_output">Program Output</string>
    <string name="array_demo">[2, 4, 5, 8, 9]</string>
    <string name="variables">Variables</string>
    <string name="memory">Analyzing View</string>
    <string name="array_name">array</string>
    <string name="_1">1</string>
    <string name="main_section_executed">main: 27</string>
    <string name="sort_method_called">sort: 3</string>
    <string name="isSorted_method_called">isSorted: 17</string>
    <string name="initial_condition">&#160;</string>
    <string name="i">i</string>
    <string name="condition_false">false</string>
    <string name="title_activity_insertion_sort_visualization">Insertion_Sort_Visualization</string>
    <!-- Strings used for fragments for navigation -->
    <string name="first_fragment_label">First Fragment</string>
    <string name="second_fragment_label">Second Fragment</string>
    <string name="next">Next</string>
    <string name="previous">Previous</string>

    <string name="hello_first_fragment">Hello first fragment</string>
    <string name="hello_second_fragment">Hello second fragment. Arg: %1$s</string>
    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="insertion_sort">Insertion Sort</string>

    <!-- Insertion Sort -->
    <string name="insertion_1">1&#160;import java.util.Arrays;</string>
    <string name="insertion_2">2&#160;public class Insertion_Sort{</string>
    <string name="insertion_3">3&#160;&#160;public static void sort(int arr[]){</string>
    <string name="insertion_4">4&#160;&#160;&#160;int n = arr.length;</string>
    <string name="insertion_5">5&#160;&#160;&#160;for(int i=0; i &#60;&#160; n; i++){</string>
    <string name="insertion_6">6&#160;&#160;&#160;&#160;int key = arr[i];</string>
    <string name="insertion_7">7&#160;&#160;&#160;&#160;int j = i - 1;</string>
    <string name="insertion_8">8&#160;&#160;&#160;&#160;while(j >=0 &amp;&amp; arr[j] > key)</string>
    <string name="insertion_9">9&#160;&#160;&#160;&#160;&#160;arr[j+1] = arr[j];</string>
    <string name="insertion_10">10&#160;&#160;&#160;&#160;&#160;j = j - 1;</string>
    <string name="insertion_11">11&#160;&#160;&#160;&#160;}</string>
    <string name="insertion_12">12&#160;&#160;&#160;&#160;arr[j+1] = key;</string>
    <string name="insertion_13">13&#160;&#160;&#160;}</string>
    <string name="insertion_14">14&#160;&#160;}</string>
    <string name="insertion_15">15&#160;&#160;public static void main(String[] args){</string>
    <string name="insertion_16">16&#160;&#160;&#160;int[] array = {2,8,5,9,1};</string>
    <string name="insertion_17">17&#160;&#160;&#160;sort(array)</string>
    <string name="insertion_18">18&#160;&#160;&#160;System.out.println(Arrays.toString(arrays));</string>
    <string name="insertion_19">19&#160;&#160;}</string>
    <string name="insertion_20">20&#160;}</string>


    <!-- Merge Sort -->
    <string name="marge_1">1&#160;import java.util.Arrays;</string>
    <string name="marge_2">2&#160;public class Merge_Sort{</string>
    <string name="marge_3">3&#160;&#160;public static void merge(int[] arr, int[] aux, int low, int mid, int high){</string>
    <string name="marge_4">4&#160;&#160;&#160;int k = low, i = low, j = mid + 1;</string>
    <string name="marge_5">5&#160;&#160;&#160;while(i&#60;&#160;=mid &amp;&amp; j&#60;&#160;=high){</string>
    <string name="marge_6">6&#160;&#160;&#160;&#160;if(arr[i]&#60;=arr[j]){</string>
    <string name="marge_7">7&#160;&#160;&#160;&#160;&#160;aux[k++] == arr[i++];</string>
    <string name="marge_8">8&#160;&#160;&#160;&#160;}</string>
    <string name="marge_9">9&#160;&#160;&#160;&#160;else{</string>
    <string name="marge_10">10&#160;&#160;&#160;&#160;&#160;aux[k++]=arr[j++]</string>
    <string name="marge_11">11&#160;&#160;&#160;&#160;}</string>
    <string name="marge_12">12&#160;&#160;&#160;}</string>
    <string name="marge_13">13&#160;&#160;&#160;while(i&#60;=mid){</string>
    <string name="marge_14">14&#160;&#160;&#160;&#160;aux[k++]=arr[i++];</string>
    <string name="marge_15">15&#160;&#160;&#160;}</string>
    <string name="marge_16">16&#160;&#160;&#160;for(i=low;i&#60;=high;i++){</string>
    <string name="marge_17">17&#160;&#160;&#160;&#160;arr[i]=aux[i]</string>
    <string name="marge_18">18&#160;&#160;&#160;}</string>
    <string name="marge_19">19&#160;&#160;}</string>
    <string name="marge_20">20&#160;&#160;public static void mergeSort(int[] arr, int[]aux, int low, int high){</string>
    <string name="marge_21">21&#160;&#160;&#160;if(high==low){</string>
    <string name="marge_22">22&#160;&#160;&#160;&#160;return;</string>
    <string name="marge_23">23&#160;&#160;&#160;}</string>
    <string name="marge_24">24&#160;&#160;&#160;int mid=(low+((high-low)>>1));</string>
    <string name="marge_25">25&#160;&#160;&#160;mergeSort(arr,aux,low,mid);</string>
    <string name="marge_26">26&#160;&#160;&#160;mergeSort(arr,aux,low,mid+1,high);</string>
    <string name="marge_27">27&#160;&#160;&#160;merge(arr,aux,low,mid,high);</string>
    <string name="marge_28">28&#160;&#160;}</string>
    <string name="marge_29">29&#160;&#160;public static void main(String[] args){</string>
    <string name="marge_30">30&#160;&#160;&#160;int[] arr={6,4,3,9};</string>
    <string name="marge_31">31&#160;&#160;&#160;int[] aux=Arrays.copyOf(arr,arr.length);</string>
    <string name="marge_32">32&#160;&#160;&#160;mergeSort(arr,aux,0,arr.length-1);</string>
    <string name="marge_33">33&#160;&#160;&#160;System.out.println(Arrays.toString(arr));</string>
    <string name="marge_34">34&#160;&#160;}</string>
    <string name="marge_35">35&#160;}</string>
    <string name="visualization_s">Visualization</string>
    <string name="analysis_s">Analysis</string>

    <!-- Ternary Search -->

    <!-- Linear Search -->

    <!-- Binary Search -->

    <!-- Stack -->

    <!-- Queue -->

    <!-- Binary Tree Traverse -->


</resources>